https://docs.google.com/document/d/1h6Tlhzh9qlfEtCMplRVIyQUVX-S9uBCW8UziTOvsfOU/edit

Цель: в сжатые сроки (10 недель) дать людям следующие знания и навыки:
Базовое понимание “что есть backend” и его максимально типичных составляющих: база данных, само приложение, “кеши” (к примеру redis) и т.п.
Умение решать типичные задачи связанные с предоставлением “API над базой данных”
Понимание проблем наиболее распространенных подходов, таких как MERN (R в данном случае игнорируем
Понимание более высокоуровневых проблем (таких как масштабирование, надежность и так далее)

Курс состоит из разработки одного большого проекта: портала с мастер-классами для Iпроекта JavaScript.ninja. Возможности:
регистрация, авторизация, восстановление пароля
вывод списка всех доступных мастер-классов (берётся из БД), те которые куплены - ведут на страницу мастер-класса (за авторизацией), некупленные - на лендинг
Страница мастер-класса со списком видео которые берутся с приватного Github-репозитория (нужно, чтоб продемонстрировать кеширование запросов к Github в будущем)
Админка
Управление списком мастер-классов
Управление промо-кодами (включая bulk-загрузку промокодов файлом и управление промокодами через API для их централизованного создания
Минимальный realtime (websocket со стримом последних покупок)

Приложение по максимуму рендерится на сервере с минимальным вкраплением frontend

Первая серия “практических” видео (около 8-12 часов, как получится), мы пишем это приложение максимально “плохо” (как к сожалению пишутся большинство приложений



 видео (каждое по 10-15 минут с объяснением тех или иных концепций), материалов для дополнительного изучения, финального задания и 10 упражнений на закрепление

Фаза 1. Все очень плохо

Введение
Что мы будем учить в этом курсе?
Что представляет собой node.js?
Node.js-приложение глазами frontend-разработчика: основные отличия
Долгоживущее
Множество клиентов
Независимые “контексты” (у каждого клиента)
Модули в node.js приложении (import vs require)


Npm-экосистема и npm/yarn как её клиенты. semver
Основы отладки node.js-приложения
Базовые инструменты и настройка IDE
Обзор основных модулей node.js, как они организованы
Контракты асинхронного программирования:
- errback (calback-last/error-first)
- thenable (promise, awync/await)
events and streams


Web

GET/POST, идемпотентность, форматы передачи данных (form/multipart, просто body), важные заголовки сервера
Основные принципы REST
Express как основной представитель middleware-based фреймворков
Концепция middlewre
Роутинг
Работа с файлами
Авторизация. Сессии и токены

Базы данных

Основы взаимодействия с БД
Концепция QueryBuilder
ORM/ODM
Document oriented vs Relational
Миграции и сиды

Realtime


Почему node.js “силён” в realtime
ws / SSE / Long polling
Нюансы realtime или почему не просто EventEmitter

Параллельно с началом Web я разрабатываю на Mongo + Express максимально криво (с обращением к ODM из контроллеров, без учета того, что у меня может быть несколько экземпляров приложения и так далее) упомянутое выше задание

Фаза 1.5 Промежуточная

Деплоим наше приложение на production
Pm2 или docker? :)
Логи приложения

Тестируем наше приложение с E2E
Фикстуры для повышения надёжности тестирования
Философия тестирования

Чем плох результат полученный в 1 фазе?
Почему плох express, почему плохо mongo? Чем чреват спагетти код?
Типичные антипаттерны на примере разработанного приложения

Фаза 2. Улучшаем приложение

В этой фазе в практике мы улучшаем наше приложение по всем фронтам: делаем банальнейшую архитектуру со слоями, переходим с MongoDB на Postgre, добавляем корректную обработку ошибок и учимся отличать их от exception, добавляем кеширование обращения к github и т.п.

Dependency injection как сердце разделения системы на слои
Типичные слои правильного node.js приложения
Как понять, что вы не нарушаете зоны слоев
12-факторные приложения и их философия
Graceful shutdown
Контракты
Транзакции в базе данных и прочие способы устранения состояния гонки
Стратегии обработки ошибок
AsyncLocalStorage и зачем оно нужно?
Кеширование
Профилирование node.js приложения. Node-clinic
Нагружаем на полную: worker_threads и прочие устаревшие решения





Фаза 3. Обзорная

Атаки на приложения
Аудит зависимостей или почему важно “читать зависимости”
Нагрузочное тестирование
ЧТО НЕ НАДО ДЕЛАТЬ НА СТОРОНЕ НОДЫ
Раздавать статику
Терминировать https

      О чем мы не поговорили:

Микросервисы
GraphQL
gRPC
TypeScript
Serverless
“Большие фреймворки” типа nest / loopback
---
Упражнения

Упражнения, это небольшие задачи с автотестами, направленные на закрепление тех или иных нюансов ноды или просто “набивания руки”

DNS - написать простой клиент для dns (UDP-only)
Bmp-rotate - зеркальное отображение BMP, просто практика на работу с buffer
Bmp-rotate-complex - тоже самое, только с жестким лимитом по памяти, практика потоков
Microexpress - написать свой простой chain-of-middlewares
Http (реализация собственного сервера HTTP - GET / POST / upload) чисто на net для того, чтобы лучше понимать асинхронность
Upload-middleware (простая middleware, аналог busboy)
Convertor (небольшое приложение, которое вытягивает файлики из БД, конвертит, загружает в S3)
Hack-me (специальное уязвимое приложение, которое надо похакать - там будет начиная от банального SQL-injection, до отсутствия CSRF и т.п.) Такой себе мини-CTF упрощенный для студентов


